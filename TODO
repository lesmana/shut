todo for shell unit test

----
rename to command line tool black box test
because this is really not a tool to do unit testing of shell scripts
this is a tool to test command line tools
and it is a black box test because we only
give input assert output and side effects
hence: command line tool black box test

short: cltbbt

----
printf with explicit format string to guard against accidental % expansion

----
how to build arguments for find in collecttests

    while read -r pattern; do
      set -- "$@" "$(buildfindarg "$pattern")"
    done

    find "$@"

the idea is to abuse "$@" as an array.

----
let find print relative names and full names to two files
using -fprintf testnames "%P\n" and -fprintf fulltestnames "%p\n"
then before runtests loop
paste together with tab as separator
then read using tab as IFS
while IFS="\t" read -r count testname fulltestname; do
  ...
done

----
test that pattern argument works with absolute and relative path

----
create mirror of actual test tree with pointers to enumerated testdirs

test tree:
tests/badger/test1
tests/mushroom/test2

shutdir:
test000001 (this is test/badger/test1)
test000002 (this is test/mushroom/test2)

mirrors (also in shutdir somehow):
tests/badger/test1 (pointer to test000001)
test/mushroom/test2 (pointer to test000002)

pointer as symlink? or just text in file?

----
read testnames from stdin

----
add option to always try to delete existing shutdir

----
when deciding whether existing shutdir is safe to delete
examine contents and look for files: tests pass fail

----
provide option to not create shutdir
work in temp directory instead

----
add option to allow no tests found to be no error

----
in output replace long paths with variables
for example
/home/lesmana/code/shellunittest/tests/shutdir/bla
replace with
$SHUTDIR/bla

----
add option to abort runtests loop if fail or error

----
allow exluding tests

----
provide option to show non executables which match given pattern
to help find tests which were mistakenly not marked executable

----
write help and better readme

----
create logfile of entire stdout of shut

----
forced fail for tests which take longer than x seconds
use command timeout

----
provide options to fine tune output
example
--print-all-reports
--print-list-of-fail
--print-list-of-pass
--print-summary

----
allow pattern for line to begin printing output
example
--show-output=10 (show last 10 lines)
--show-output=diff (show lines after line containing diff)

----
specify in output if last x lines
example:
output (last 10 lines)

----
specify in output if empty
example
stderr: (empty)

----
recreate report from existing shutdir without rerunning tests

----
add callbacks for shut start, shut end, test start, and test end.
let caller of shut define variables with commands
then call in appropriate place
${callbacktestend-true} $passorfail
or
${callbackshutend-true} $testcount $runcount $passcount $failcount
if variable is defined will use command
if not defined will use true
