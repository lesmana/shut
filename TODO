todo for shell unit test

----
how to build arguments for find in collecttests

    while read -r pattern; do
      set -- "$@" "$(buildfindarg "$pattern")"
    done

    find "$@"

the idea is to abuse "$@" as an array.

----
let find print relative names and full names to two files
using -fprintf testnames "%P\n" and -fprintf fulltestnames "%p\n"
then before runtests loop
paste together with tab as separator
then read using tab as IFS
while IFS="\t" read -r count testname fulltestname; do
  ...
done

----
test that pattern argument works with absolute and relative path

----
read testnames from stdin

----
add option to always try to delete existing shutdir

----
better marker in shutdir to recognize when deciding whether safe to delete
something like: .shutdir

----
skip shutdir when collecting tests
use marker for shutdir to skip shutdir

is this necessary at all?
is it not responsibility of user to separate tests from shutdirs?

----
provide option to not create shutdir
work in temp directory instead

----
add option to allow no tests found to be no error

----
in output replace long paths with variables
for example
/home/lesmana/code/shellunittest/tests/shutdir/bla
replace with
$SHUTDIR/bla

----
add option to abort runtests loop if fail or error

----
allow exluding tests

----
provide option to show non executables which match given pattern
to help find tests which were mistakenly not marked executable

----
write help and better readme

----
create logfile of entire stdout of shut

----
forced fail for tests which take longer than x seconds
use command timeout

----
provide options to fine tune output
example
--print-all-reports
--print-list-of-fail
--print-list-of-pass
--print-summary

----
allow custom filter to filter output of tests
example
--output-filter='grep error'

----
specify in output if empty
example
stderr: (empty)

----
indent using tab character to not mess up output relying on tab
for example diff

----
give option for custom indent string

----
recreate report from existing shutdir without rerunning tests

----
add callbacks for shut start, shut end, test start, and test end.
let caller of shut define variables with commands
then call in appropriate place
${callbacktestend-true} $passorfail
or
${callbackshutend-true} $testcount $runcount $passcount $failcount
if variable is defined will use command
if not defined will use true
