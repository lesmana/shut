#! /bin/sh

prefix="test"
donotruntests=false
recursive=false
verbose=false
logdir=

handle_args() {
  while getopts "l:nrv" "opt"; do
    case "$opt" in
      l) logdir="$OPTARG";;
      n) donotruntests=true;;
      r) recursive=true;;
      v) verbose=true;;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    prefix="$@"
  fi
}

setup() {
  if [ -n "$logdir" ]; then
    if [ -e "$logdir" ]; then
      rm -rf "$logdir"
    fi
    mkdir -p "$logdir"
  fi
  SHUT_PWD=$PWD
}

collecttestnames() {
  if $recursive; then
    maxdepth=""
  else
    maxdepth="-maxdepth 1"
  fi
  find -L . $maxdepth -type f -executable -name "$prefix*" | sort
}

runtestinpwd() {
  testname=$1
  fulltestname=$(readlink -f "$testname")
  dirname=$(dirname "$fulltestname")
  basename=$(basename "$fulltestname")
  (
    cd "$dirname";
    export SHUT_PWD
    export SHUT_TEST=$fulltestname
    export SHUT_TESTPWD=$PWD
    "./$basename" 2>&1
  )
  exitstatus=$?
  return $exitstatus
}

stdintoexitstatus() {
  read exitstatus
  return $exitstatus
}

runtestinpwdandlog() {
  testname=$1
  mkdir -p "$logdir/$testname"
  outputfile="$logdir/$testname/output"
  (((runtestinpwd "$testname"; echo $? >&3) |
        tee "$outputfile" >&4) 3>&1 | stdintoexitstatus) 4>&1
  exitstatus=$?
  exitstatusfile="$logdir/$testname/exitstatus"
  echo $exitstatus > "$exitstatusfile"
  return $exitstatus
}

runtestandlogmaybe() {
  testname=$1
  if [ -n "$logdir" ]; then
    runtestinpwdandlog "$testname"
  else
    runtestinpwd "$testname"
  fi
}

decoratehead() {
  testname=$1
  echo "================"
  echo "$testname"
  echo "----------------"
  echo "output:"
}

decoratebody() {
  sed 's/^/  /'
}

decoratetail() {
  testname=$1
  exitstatus=$2
  echo "----------------"
  echo "exitstatus: $exitstatus"
  if [ $exitstatus -eq 0 ]; then
    echo "PASS $testname"
  else
    echo "FAIL $testname"
  fi
  echo "----------------"
}

runtestprintall() {
  testname=$1
  decoratehead "$testname"
  (((runtestandlogmaybe "$testname"; echo $? >&3) |
        decoratebody >&4) 3>&1 | stdintoexitstatus) 4>&1
  exitstatus=$?
  decoratetail "$testname" "$exitstatus"
  return $exitstatus
}

runtestprintonlyfail() {
  testname=$1
  output="$(runtestprintall "$testname")"
  exitstatus=$?
  if [ $exitstatus -ne 0 ]; then
    echo "$output"
  fi
  return $exitstatus
}

runtest() {
  testname=$1
  if $verbose; then
    runtestprintall "$testname"
  else
    runtestprintonlyfail "$testname"
  fi
}

runtests() {
  fail=0
  while read testname; do
    echo "$testname" >&3
    if runtest "$testname"; then
      echo "$testname" >&4
    else
      echo "$testname" >&5
      fail=1
    fi
  done
  return $fail
}

count() {
  wc -l
}

summaryline() {
  read run
  read pass
  read fail
  echo "run: $run pass: $pass fail: $fail"
}

runtestsandprintsummary() {
  ((((((
  runtests >&6; echo $? >&7
  ) 3>&1 | count >&3
  ) 4>&1 | count >&4
  ) 5>&1 | count >&5
  ) 3>&1 4>&1 5>&1 | summaryline >&6
  ) 7>&1 | stdintoexitstatus
  ) 6>&1
}

runtestsnotandprintsummary() {
  count=0
  while read testname; do
    echo "$testname"
    count=$(($count + 1))
  done
  echo "would run: $count"
}

runtestsornot() {
  if $donotruntests; then
    runtestsnotandprintsummary
  else
    runtestsandprintsummary
  fi
}

main() {
  handle_args "$@"
  setup
  collecttestnames | runtestsornot
  success=$?
  return $success
}

main "$@"
