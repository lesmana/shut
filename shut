#! /bin/dash

default_pattern="test"

config_donotruntests=false
config_verbose=false
config_shutdir="shutdir"
config_keep=false
config_quiet=false
config_tail=10
SHUT_PWD="$PWD"

exitstatus_pass=0
exitstatus_fail=1

# -----------------------------------------------------------------------------
runtest() {
  local fulltestname="$1"
  (
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    exec 0</dev/null # close stdin
    exec 1>&3 3>&- # redirect stdout to &3
    exec 2>&4 4>&- # redirect stderr to &4
    "$fulltestname"
  )
}

runtestsaveexitstatus() {
  local fulltestname="$1"
  runtest "$fulltestname"
  local exitstatus=$?
  printf -- '%s\n' "$exitstatus" >../exitstatus
  printf -- '%s\n' "$exitstatus"
}

runtestsaveoutputsplit() {
  local fulltestname="$1"
  runtestsaveexitstatus "$fulltestname" 3>../stdout 4>../stderr
}

runtestsaveoutput() {
  local fulltestname="$1"
  runtestsaveoutputsplit "$fulltestname"
}

# -----------------------------------------------------------------------------
mkdir_workdir() {
  mkdir workdir >/dev/null 2>&1 || {
    printf -- 'error creating workdir\n' >&4
    return 3
  }
}

cd_workdir() {
  cd workdir >/dev/null 2>&1 || {
    printf -- 'error changing directory to workdir\n' >&4
    return 3
  }
}

runtestinworkdir() {
  local fulltestname="$1"
  mkdir_workdir || return $?
  (
    cd_workdir || return $?
    runtestsaveoutput "$fulltestname"
  )
}

# -----------------------------------------------------------------------------
printheader() {
  local statusstring="$1"
  local testname="$2"
  printf -- '================\n'
  printf -- '%s %s\n' "$statusstring" "$testname"
}

printexitstatus() {
  local exitstatus="$1"
  printf -- 'exitstatus: %s\n' "$exitstatus"
}

printbodysplit() {
  printf -- 'stdout:\n'
  cat stdout | tail -n "$config_tail" | sed 's/^/  /'
  printf -- 'stderr:\n'
  cat stderr | tail -n "$config_tail" | sed 's/^/  /'
}

printbody() {
  printbodysplit
}

actualprintreportpass() {
  local testname="$1"
  printheader "PASS" "$testname"
  printbody
}

actualprintreportfail() {
  local testname="$1"
  local exitstatus="$2"
  printheader "FAIL" "$testname"
  printexitstatus "$exitstatus"
  printbody
}

printreportpass() {
  if ! $config_verbose; then
    return
  fi
  local testname="$1"
  actualprintreportpass "$testname"
}

printreportfail() {
  if $config_quiet; then
    return
  fi
  local testname="$1"
  local exitstatus="$2"
  actualprintreportfail "$testname" "$exitstatus"
}

printreport() {
  local testname="$1"
  local exitstatus="$2"
  printf -- '%s\n' "$testname" >&5
  if [ "$exitstatus" -eq "$exitstatus_pass" ]; then
    printf -- '%s\n' "$testname" >&6
    printreportpass "$testname"
  else
    printf -- '%s\n' "$testname" >&7
    printreportfail "$testname" "$exitstatus"
  fi
}

runtestandprintreport() {
  local testname="$1"
  local fulltestname="$SHUT_PWD/${testname#./}"
  local exitstatus
  exitstatus="$(runtestinworkdir "$fulltestname")" || return $?
  printreport "$testname" "$exitstatus" >&3
}

# -----------------------------------------------------------------------------
mkdir_testdir() {
  local testdir="$1"
  mkdir -p -- "$testdir" >/dev/null 2>&1 || {
    printf -- 'error creating testdir: %s\n' "$testdir" >&4
    return 3
  }
}

cd_testdir() {
  local testdir="$1"
  cd -- "$testdir" >/dev/null 2>&1 || {
    printf -- 'error changing directory to testdir: %s\n' "$testdir" >&4
    return 3
  }
}

runtestintestdir() {
  local testname="$1"
  mkdir_testdir "$testname" || return $?
  (
    cd_testdir "$testname" || return $?
    runtestandprintreport "$testname"
  )
}

# -----------------------------------------------------------------------------
loopovertestnames() {
  while read -r testname; do
    runtestintestdir "$testname" || return $?
  done <testsfound 5>testsrun 6>testspass 7>testsfail
}

printsemanticexitstatus() {
  if [ ! -s testsfail ]; then
    printf -- '%s\n' "$exitstatus_pass"
  else
    printf -- '%s\n' "$exitstatus_fail"
  fi
}

runtests() {
  loopovertestnames || return $?
  printsemanticexitstatus
}

# -----------------------------------------------------------------------------
printlist() {
  local listname="$1"
  local filename="$2"
  printf -- '%s:\n' "$listname"
  cat "$filename"
  printf -- '================\n'
}

printcounts() {
  wc -l testsfound testsrun testspass testsfail | {
    read -r foundcount ignorefilename
    read -r runcount ignorefilename
    read -r passcount ignorefilename
    read -r failcount ignorefilename
    read -r ignoretotal
    printf -- 'found: %d run: %d pass: %d fail: %d\n' \
          "$foundcount" "$runcount" "$passcount" "$failcount"
  }
}

printsummary() {
  printf -- '================\n'
  if [ -s testsfail ]; then
    printlist fail testsfail
  fi
  printcounts
}

runtestsandprintsummary() {
  runtests || return $?
  printsummary >&3
}

# -----------------------------------------------------------------------------
rm_shutdir() {
  if [ ! -e "$config_fullshutdir" ]; then
    return
  fi
  if $config_keep; then
    printf -- 'name exists: %s\n' "$config_shutdir" >&4
    printf -- 'will not overwrite\n' >&4
    return 2
  fi
  if [ ! -d "$config_fullshutdir" ]; then
    printf -- 'is not shutdir: %s\n' "$config_shutdir" >&4
    printf -- 'will not overwrite\n' >&4
    return 2
  fi
  rm -r -- "$config_fullshutdir" >/dev/null 2>&1 || {
    printf -- 'error deleting %s\n' "$config_fullshutdir" >&4
    printf -- 'cannot continue\n' >&4
    return 3
  }
}

mkdir_shutdir() {
  mkdir -p -- "$config_fullshutdir" >/dev/null 2>&1 || {
    printf -- 'error creating directory %s\n' "$config_fullshutdir" >&4
    printf -- 'cannot continue\n' >&4
    return 3
  }
}

cp_tests_shutdir() {
  cp -- testsfound "$config_fullshutdir" >/dev/null 2>&1 || {
    printf -- 'error copying testsfound to %s\n' "$config_fullshutdir" >&4
    printf -- 'cannot continue\n' >&4
    return 3
  }
}

cd_shutdir() {
  cd -- "$config_fullshutdir" >/dev/null 2>&1 || {
    printf -- 'error changing directory to %s\n' "$config_fullshutdir" >&4
    printf -- 'cannot continue\n' >&4
    return 3
  }
}

runtestsinshutdir() {
  rm_shutdir || return $?
  mkdir_shutdir || return $?
  cp_tests_shutdir || return $?
  (
    cd_shutdir || return $?
    runtestsandprintsummary
  )
}

# -----------------------------------------------------------------------------
actualprinttestnames() {
  printf -- '================\n'
  printlist found testsfound
  local foundcount=$(wc -l <testsfound)
  printf -- 'found: %s\n' "$foundcount"
}

printtestnames() {
  actualprinttestnames >&3
  printf -- '%s\n' "$exitstatus_pass"
}

# -----------------------------------------------------------------------------
work() {
  if $config_donotruntests; then
    printtestnames
  else
    runtestsinshutdir
  fi
}

workiftestsfound() {
  [ -s testsfound ] || {
    printf -- 'no tests found\n' >&3
    return 2
  }
  work
}

# -----------------------------------------------------------------------------
collecttestnames() {
  if [ ! -s patterns ]; then
    printf -- '%s\n' "$default_pattern" >patterns
  fi
  local pattern
  local print="-false"
  while read -r pattern; do
    if [ -f "$SHUT_PWD/$pattern" ]; then
      print="$print -o -type f -executable -path */$pattern"
    elif [ -d "$SHUT_PWD/$pattern" ]; then
      print="$print -o -type f -executable -path */$pattern/*"
    else
      print="$print -o -type f -executable -regex .*/$pattern[^/]*"
    fi
  done <patterns
  find "$SHUT_PWD" -type d -name "$config_shutdir" -prune -o \
        \( $print \) -printf "./%P\n" | sort >testsfound
}

collectnamesandwork() {
  collecttestnames
  workiftestsfound
}

# -----------------------------------------------------------------------------
configfromargv() {
  # this function expects "$@" as argument
  local arg
  while [ $# -ge 1 ]; do
    arg="$1"
    case "$arg" in
      -d) shift ; config_shutdir="$1" ;;
      -k) config_keep=true ;;
      -n) config_donotruntests=true ;;
      -v) config_verbose=true ;;
      -q) config_quiet=true ;;
      -t) shift ; config_tail="$1" ;;
      --) shift ; break ;;
      -*) printf -- '%s\n' "argv error: $1" ; exit 2 ;;
       *) break ;;
    esac
    shift
  done
  local pattern
  for pattern in "$@"; do
    printf -- '%s\n' "$pattern" >>patterns
  done
}

setup() {
  config_fullshutdir="$(readlink -f "$SHUT_PWD/$config_shutdir")"
}

configthenwork() {
  configfromargv "$@"
  setup
  collectnamesandwork
}

# -----------------------------------------------------------------------------
workcatcherror() {
  configthenwork "$@" 2>workerrorunhandled 4>workerrorhandled
  local exitstatus=$?
  if [ -s workerrorhandled ]; then
    cat workerrorhandled >&2
  fi
  if [ -s workerrorunhandled ]; then
    printf -- 'unhandled error:\n' >&2
    cat workerrorunhandled >&2
  fi
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
mktemp_tempdir() {
  config_tempdir="$(mktemp -d --tmpdir shuttempdir.XXX 2>/dev/null)" || {
    printf -- 'error creating tempdir\n' >&2
    printf -- 'cannot continue\n' >&2
    return 3
  }
}

cd_tempdir() {
  cd -- "$config_tempdir" >/dev/null 2>&1 || {
    printf -- 'failed changing directory to %s\n' "$config_tempdir" >&2
    printf -- 'cannot continue\n' >&2
    return 3
  }
}

rm_tempdir() {
  rm -r -- "$config_tempdir" >/dev/null 2>&1 || {
    printf -- 'error deleting tempdir\n' >&2
    printf -- 'not fatal but annoying\n' >&2
    return 3
  }
}

workintempdir() {
  mktemp_tempdir || return $?
  (
    cd_tempdir || return $?
    workcatcherror "$@"
  )
  local exitstatus=$?
  rm_tempdir || return $?
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
switchstdoutexitstatus() {
  local exitstatus
  exitstatus="$(workintempdir "$@")" 3>&1 || return $?
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
main() {
  switchstdoutexitstatus "$@"
}

main "$@"
