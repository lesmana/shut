#! /bin/sh

default_pattern="test"

config_donotruntests=false
config_verbose=false
config_shutdir="shutdir"
config_keep=false
config_split=false
config_quiet=false
config_tail=10
SHUT_PWD="$PWD"

# -----------------------------------------------------------------------------
runtest() {
  local fulltestname="$1"
  (
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    exec 0</dev/null 1>&3 3>&- 2>&4 4>&-
    "$fulltestname"
  )
}

runtestsaveexitstatus() {
  local fulltestname="$1"
  runtest "$fulltestname"
  local exitstatus=$?
  printf -- '%s\n' "$exitstatus" > ../exitstatus
  printf -- '%s\n' "$exitstatus"
}

runtestsaveoutputsplit() {
  local fulltestname="$1"
  runtestsaveexitstatus "$fulltestname" 3> ../stdout 4> ../stderr
}

runtestsaveoutputmerge() {
  local fulltestname="$1"
  runtestsaveexitstatus "$fulltestname" 3> ../output 4>&3
}

# -----------------------------------------------------------------------------
mkdir_workdir() {
  mkdir workdir > /dev/null 2>&1 || {
    printf -- '%s\n' "error creating workdir" >&4
    return 3
  }
}

cd_workdir() {
  cd workdir > /dev/null 2>&1 || {
    printf -- '%s\n' "error changing directory to workdir" >&4
    return 3
  }
}

runtestinworkdir() {
  local fulltestname="$1"
  mkdir_workdir || return $?
  (
    cd_workdir || return $?
    $runtestsaveoutput_func "$fulltestname"
  )
}

# -----------------------------------------------------------------------------
printheader() {
  local statusstring="$1"
  local testname="$2"
  printf -- '%s\n' "================"
  printf -- '%s\n' "$statusstring $testname"
}

printexitstatus() {
  local exitstatus="$1"
  printf -- '%s\n' "exitstatus: $exitstatus"
}

printbodysplit() {
  printf -- '%s\n' "stdout:"
  cat stdout | tail -n "$config_tail" | sed 's/^/  /'
  printf -- '%s\n' "stderr:"
  cat stderr | tail -n "$config_tail" | sed 's/^/  /'
}

printbodymerge() {
  printf -- '%s\n' "output:"
  cat output | tail -n "$config_tail" | sed 's/^/  /'
}

printreportpass() {
  local testname="$1"
  printheader "PASS" "$testname"
  $printbody_func
}

printreportfail() {
  local testname="$1"
  local exitstatus="$2"
  printheader "FAIL" "$testname"
  printexitstatus "$exitstatus"
  $printbody_func
}

printreport() {
  local testname="$1"
  local exitstatus="$2"
  printf -- '%s\n' "$testname" >> "../testsrun"
  if [ "$exitstatus" -eq 0 ]; then
    printf -- '%s\n' "$testname" >> "../testspass"
    $printreportpass_func "$testname"
  else
    printf -- '%s\n' "$testname" >> "../testsfail"
    $printreportfail_func "$testname" "$exitstatus"
  fi
}

runtestandprintreport() {
  local testname="$1"
  local fulltestname="$SHUT_PWD/${testname#./}"
  local exitstatus
  exitstatus="$(runtestinworkdir "$fulltestname")" || return $?
  printreport "$testname" "$exitstatus" >&3
}

# -----------------------------------------------------------------------------
runtestcatchtunhandlederror() {
  local unhandled="$config_tempdir/runtesterrorunhandled"
  runtestandprintreport "$@" 2> "$unhandled" || {
    local exitstatus=$?
    if [ -s "$unhandled" ]; then
      cat "$unhandled" >&4
    fi
    return "$exitstatus"
  }
}

runtestcatchthandlederror() {
  local handled="$config_tempdir/runtesterrorhandled"
  runtestcatchtunhandlederror "$@" 4> "$handled" || {
    local exitstatus=$?
    if [ -s "$handled" ]; then
      cat "$handled" >&2
    fi
    return "$exitstatus"
  }
}

runtestcatchterror() {
  runtestcatchthandlederror "$@" 2>&4 || {
    local exitstatus=$?
    printf -- '%s\n' "$testname" >> "../testserror"
    return "$exitstatus"
  }
}

# -----------------------------------------------------------------------------
mkdir_testdir() {
  local testdir="$1"
  mkdir -- "$testdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error creating testdir: $testdir" >&4
    return 3
  }
}

cd_testdir() {
  local testdir="$1"
  cd -- "$testdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error changing directory to testdir: $testdir" >&4
    return 3
  }
}

runtestintestdir() {
  local count="$1"
  local testname="$2"
  local testdir="test$count"
  mkdir_testdir "$testdir" || return $?
  (
    cd_testdir "$testdir" || return $?
    runtestcatchterror "$testname"
  )
}

# -----------------------------------------------------------------------------
runtestdetermineexitstatus() {
  runtestintestdir "$@"
}

# -----------------------------------------------------------------------------
runtests() {
  touch testsrun testspass testsfail testserror
  local count testname
  nl -n rz testsfound | while read -r count testname; do
    runtestdetermineexitstatus "$count" "$testname" || return $?
  done
}

# -----------------------------------------------------------------------------
printlist() {
  local listname="$1"
  local filename="$2"
  printf -- '%s\n' "================"
  printf -- '%s\n' "$listname:"
  cat "$filename"
}

printcounts() {
  wc -l testsfound testsrun testspass testsfail | {
    read -r foundcount ignorefilename
    read -r runcount ignorefilename
    read -r passcount ignorefilename
    read -r failcount ignorefilename
    read -r ignoretotal
    printf -- '%s\n' "================"
    printf -- 'found: %d run: %d pass: %d fail: %d\n' \
          "$foundcount" "$runcount" "$passcount" "$failcount"
  }
}

printsummary() {
  if [ -s testsfail ]; then
    printlist fail testsfail
  fi
  printcounts
}

runtestsandprintsummary() {
  runtests || return $?
  printsummary >&3
}

# -----------------------------------------------------------------------------
determineexitstatus() {
  [ ! -s testsfail ] && [ ! -s testserror ] # exitstatus based on list empty or not
}

runtestsdetermineexitstatus() {
  runtestsandprintsummary
  determineexitstatus
}

# -----------------------------------------------------------------------------
rm_shutdir() {
  if [ ! -e "$config_fullshutdir" ]; then
    return
  fi
  if $config_keep; then
    printf -- '%s\n' "name exists: $config_shutdir" >&4
    printf -- '%s\n' "will not overwrite" >&4
    return 2
  fi
  if [ ! -d "$config_fullshutdir" ]; then
    printf -- '%s\n' "is not shutdir: $config_shutdir" >&4
    printf -- '%s\n' "will not overwrite" >&4
    return 2
  fi
  rm -r -- "$config_fullshutdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error deleting $config_fullshutdir" >&4
    printf -- '%s\n' "cannot continue" >&4
    return 3
  }
}

mkdir_shutdir() {
  mkdir -p -- "$config_fullshutdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error creating directory $config_fullshutdir" >&4
    printf -- '%s\n' "cannot continue" >&4
    return 3
  }
}

cp_tests_shutdir() {
  cp -- testsfound "$config_fullshutdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error copying testsfound to $config_fullshutdir" >&4
    printf -- '%s\n' "cannot continue" >&4
    return 3
  }
}

cd_shutdir() {
  cd -- "$config_fullshutdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error changing directory to $config_fullshutdir" >&4
    printf -- '%s\n' "cannot continue" >&4
    return 3
  }
}

runtestsinshutdir() {
  rm_shutdir || return $?
  mkdir_shutdir || return $?
  cp_tests_shutdir || return $?
  (
    cd_shutdir || return $?
    runtestsdetermineexitstatus
  )
}

# -----------------------------------------------------------------------------
printtestnames() {
  cat testsfound >&3
  local count=$(wc -l < testsfound)
  printf -- '%s\n' "================" >&3
  printf -- '%s\n' "would run: $count" >&3
}

# -----------------------------------------------------------------------------
work() {
  if $config_donotruntests; then
    printtestnames
  else
    runtestsinshutdir
  fi
}

# -----------------------------------------------------------------------------
collecttestnames() {
  if [ ! -s patterns ]; then
    printf -- '%s\n' "$default_pattern" > patterns
  fi
  local pattern
  local print="-false"
  while read -r pattern; do
    if [ -f "$SHUT_PWD/$pattern" ]; then
      print="$print -o -type f -executable -path */$pattern"
    elif [ -d "$SHUT_PWD/$pattern" ]; then
      print="$print -o -type f -executable -path */$pattern/*"
    else
      print="$print -o -type f -executable -regex .*/$pattern[^/]*"
    fi
  done < patterns
  find "$SHUT_PWD" -type d -name "$config_shutdir" -prune -o \
        \( $print \) -printf "./%P\n" | sort > testsfound
}

workiftestsfound() {
  [ -s testsfound ] || {
    printf -- '%s\n' "no tests found" >&3
    return 2
  }
  work
}

collectnamesandwork() {
  collecttestnames
  workiftestsfound
}

# -----------------------------------------------------------------------------
configfromargv() {
  # this function expects "$@" as argument
  local arg
  while [ $# -ge 1 ]; do
    arg="$1"
    case "$arg" in
      -d) shift ; config_shutdir="$1" ;;
      -k) config_keep=true ;;
      -n) config_donotruntests=true ;;
      -v) config_verbose=true ;;
      -x) config_split=true ;;
      -q) config_quiet=true ;;
      -t) shift ; config_tail="$1" ;;
      --) shift ; break ;;
      -*) printf -- '%s\n' "argv error: $1" ; exit 2 ;;
       *) break ;;
    esac
    shift
  done
  local pattern
  for pattern in "$@"; do
    printf -- '%s\n' "$pattern" >> patterns
  done
}

setup() {
  config_fullshutdir="$(readlink -f "$SHUT_PWD/$config_shutdir")"
  if $config_split; then
    runtestsaveoutput_func=runtestsaveoutputsplit
    printbody_func=printbodysplit
  else
    runtestsaveoutput_func=runtestsaveoutputmerge
    printbody_func=printbodymerge
  fi
  if $config_verbose; then
    printreportpass_func=printreportpass
    printreportfail_func=printreportfail
  elif $config_quiet; then
    printreportpass_func=true
    printreportfail_func=true
  else
    printreportpass_func=true
    printreportfail_func=printreportfail
  fi
}

configthenwork() {
  configfromargv "$@"
  setup
  collectnamesandwork
  local exitstatus=$?
  printf -- '%s\n' "$exitstatus"
}

# -----------------------------------------------------------------------------
workcatcherror() {
  configthenwork "$@" 2> workerrorunhandled 4> workerrorhandled
  local exitstatus=$?
  if [ -s workerrorhandled ]; then
    cat workerrorhandled >&2
  fi
  if [ -s workerrorunhandled ]; then
    printf -- '%s\n' "unhandled error:" >&2
    cat workerrorunhandled >&2
  fi
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
mktemp_tempdir() {
  config_tempdir="$(mktemp -d --tmpdir shuttempdir.XXX 2> /dev/null)" || {
    printf -- '%s\n' "error creating tempdir" >&2
    printf -- '%s\n' "cannot continue" >&2
    return 3
  }
}

cd_tempdir() {
  cd -- "$config_tempdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "failed changing directory to $config_tempdir" >&2
    printf -- '%s\n' "cannot continue" >&2
    return 3
  }
}

rm_tempdir() {
  rm -r -- "$config_tempdir" > /dev/null 2>&1 || {
    printf -- '%s\n' "error deleting tempdir" >&2
    printf -- '%s\n' "not fatal but annoying" >&2
    return 3
  }
}

workintempdir() {
  mktemp_tempdir || return $?
  (
    cd_tempdir || return $?
    workcatcherror "$@"
  )
  local exitstatus=$?
  rm_tempdir || return $?
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
switchstdoutexitstatus() {
  local exitstatus
  exitstatus=$(workintempdir "$@") 3>&1 || return $?
  return "$exitstatus"
}

# -----------------------------------------------------------------------------
main() {
  switchstdoutexitstatus "$@"
}

main "$@"
