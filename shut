#! /bin/sh

prefix="test"
donotruntests=false
verbose=false
shutdir="shutdir"
delete=false
split=false
SHUT_PWD=$PWD

configfromargv() {
  while getopts "d:nvfx" "opt"; do
    case "$opt" in
      d) shutdir="$OPTARG";;
      f) delete=true;;
      n) donotruntests=true;;
      v) verbose=true;;
      x) split=true;;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    prefix="$@"
  fi
}

sanitycheck() {
  fullshutdir=$(readlink -f "$shutdir")
  if [ -e "$fullshutdir" ]; then
    if $delete; then
      true
    else
      echo "name exists: $shutdir" >&2
      echo "will not overwrite" >&2
      echo "use -f to overwrite" >&2
      exit 2
    fi
  fi
  shutdir=$fullshutdir
}

createshutdir() {
  rm -rf "$shutdir"
  mkdir -p "$shutdir"
}

collecttestnames() {
  find -L $SHUT_PWD -type f -executable -name "$prefix*" | sort
}

runtestinpwd() {
  testname=$1
  (
    mkdir workdir
    cd workdir
    export SHUT_PWD
    export SHUT_TEST="$testname"
    export SHUT_TESTPWD="$PWD"
    "$testname"
  )
  exitstatus=$?
  return $exitstatus
}

decoratehead() {
  relativetestname=$1
  echo "================"
  echo "$relativetestname"
  echo "----------------"
}

decoratebody() {
  echo "output:"
  sed 's/^/  /'
}

decoratetail() {
  relativetestname=$1
  exitstatus=$2
  echo "----------------"
  echo "exitstatus: $exitstatus"
  if [ $exitstatus -eq 0 ]; then
    echo "PASS $relativetestname"
  else
    echo "FAIL $relativetestname"
  fi
  echo "----------------"
}

decorate() {
  relativetestname=$1
  exitstatus=$2
  decoratehead "$relativetestname"
  decoratebody
  decoratetail "$relativetestname" "$exitstatus"
}

printall() {
  relativetestname=$1
  exitstatus=$2
  decorate "$relativetestname" $exitstatus
}

printonlyfail() {
  relativetestname=$1
  exitstatus=$2
  if [ $exitstatus -ne 0 ]; then
    decorate "$relativetestname" $exitstatus
  fi
}

printoutput() {
  relativetestname=$1
  exitstatus=$2
  if $verbose; then
    printall "$relativetestname" $exitstatus
  else
    printonlyfail "$relativetestname" $exitstatus
  fi
}

runtestsplitouterr() {
  testname=$1
  relativetestname=$2
  runtestinpwd "$testname" > stdout 2> stderr
  exitstatus=$?
  echo $exitstatus > exitstatus
  cat stdout stderr | printoutput "$relativetestname" $exitstatus
  return $exitstatus
}

runtestmergedouterr() {
  testname=$1
  relativetestname=$2
  runtestinpwd "$testname" > output 2>&1
  exitstatus=$?
  echo $exitstatus > exitstatus
  printoutput "$relativetestname" $exitstatus < output
  return $exitstatus
}

runtestwithsplitormerged() {
  testname=$1
  relativetestname=$2
  if $split; then
    runtestsplitouterr "$testname" "$relativetestname"
  else
    runtestmergedouterr "$testname" "$relativetestname"
  fi
}

runtestintestworkdir() {
  testname=$1
  relativetestname=$(echo "$testname" | sed "s:$SHUT_PWD:.:")
  testworkdir=$relativetestname.dir
  (
    mkdir -p "$testworkdir"
    cd "$testworkdir";
    runtestwithsplitormerged "$testname" "$relativetestname"
  )
}

runtests() {
  while read testname; do
    touch tests pass fail
    if runtestintestworkdir "$testname"; then
      echo "$testname" >> pass
    else
      echo "$testname" >> fail
    fi
  done
}

runtestsandprintsummary() {
  runtests
  wc -l tests pass fail | {
    read runcount filenameignored
    read passcount filenameignored
    read failcount filenameignored
    read totalignored
    echo "run: $runcount pass: $passcount fail: $failcount"
    [ $failcount -eq 0 ] # return success if failcount is zero
  }
}

runtestsnotandprintsummary() {
  count=0
  while read testname; do
    relativetestname=$(echo "$testname" | sed "s:$SHUT_PWD:.:")
    echo "$relativetestname"
    count=$(($count + 1))
  done
  echo "would run: $count"
}

runtestsornot() {
  if $donotruntests; then
    runtestsnotandprintsummary
  else
    runtestsandprintsummary
  fi
}

doshut() {
  createshutdir
  collecttestnames > "$shutdir"/tests
  if [ -s "$shutdir"/tests ]; then
    (cd "$shutdir" && runtestsornot ) < "$shutdir"/tests
    exitstatus=$?
  else
    echo "no tests found"
    exitstatus=3
  fi
  return $exitstatus
}

main() {
  configfromargv "$@"
  if sanitycheck; then
    doshut
    exitstatus=$?
  else
    exitstatus=2
  fi
  return $exitstatus
}

main "$@"
