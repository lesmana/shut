#! /bin/sh

config_prefix="test"
config_donotruntests=false
config_verbose=false
config_shutdir="shutdir"
config_delete=false
config_split=false
config_quiet=false
config_tail=10
SHUT_PWD=$PWD

configfromargv() {
  while getopts "d:nvfxqt:" "opt"; do
    case "$opt" in
      d) config_shutdir="$OPTARG";;
      f) config_delete=true;;
      n) config_donotruntests=true;;
      v) config_verbose=true;;
      x) config_split=true;;
      q) config_quiet=true;;
      t) config_tail="$OPTARG";;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    config_prefix="$@"
  fi
}

setup() {
  config_fullshutdir=$(readlink -f "$config_shutdir")
  if $config_delete; then
    candeleteshutdir=true
  else
    candeleteshutdir=trueifshutdirdoesnotexists
  fi
  if $config_donotruntests; then
    shutaction=printtestnames
  else
    shutaction=runtests
  fi
  if $config_split; then
    runtestsaveoutput=runtestsaveoutputsplit
    printbody=printbodysplit
  else
    runtestsaveoutput=runtestsaveoutputmerge
    printbody=printbodymerge
  fi
  if $config_verbose; then
    printoutputpass=printoutputpassfunc
    printoutputfail=printoutputfailfunc
  elif $config_quiet; then
    printoutputpass=true
    printoutputfail=true
  else
    printoutputpass=true
    printoutputfail=printoutputfailfunc
  fi
}

collecttestnames() {
  find -type d -name "$config_shutdir" -prune -o \
        -type f -executable -name "$config_prefix*" -print | sort
}

trueifshutdirdoesnotexists() {
  [ ! -e "$config_fullshutdir" ]
}

runtestinworkdir() {
  testname=$1
  fulltestname=$(readlink -f "$SHUT_PWD/$testname")
  mkdir workdir
  (
    cd workdir
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    export SHUT_TESTPWD="$PWD"
    "$fulltestname"
  )
  exitstatus=$?
  return $exitstatus
}

runtestsaveoutputsplit() {
  testname=$1
  runtestinworkdir "$testname" > stdout 2> stderr
}

runtestsaveoutputmerge() {
  testname=$1
  runtestinworkdir "$testname" > output 2>&1
}

runtestsaveoutputexitstatus() {
  testname=$1
  $runtestsaveoutput "$testname"
  exitstatus=$?
  echo $exitstatus > exitstatus
  return $exitstatus
}

printbodysplit() {
  echo "stdout:"
  cat stdout | tail -n $config_tail | sed 's/^/  /'
  echo "stderr:"
  cat stderr | tail -n $config_tail | sed 's/^/  /'
}

printbodymerge() {
  echo "output:"
  cat output | tail -n $config_tail | sed 's/^/  /'
}

printoutputdecorated() {
  testname=$1
  exitstatus=$2
  state=$3
  echo "================"
  echo "$testname"
  echo "----------------"
  $printbody
  echo "----------------"
  echo "exitstatus: $exitstatus"
  echo "$state $testname"
  echo "----------------"
}

printoutputpassfunc() {
  testname=$1
  exitstatus=$2
  printoutputdecorated "$testname" $exitstatus "PASS"
}

printoutputfailfunc() {
  testname=$1
  exitstatus=$2
  printoutputdecorated "$testname" $exitstatus "FAIL"
}

runtestandprintoutput() {
  testname=$1
  runtestsaveoutputexitstatus "$testname"
  exitstatus=$?
  if [ $exitstatus -eq 0 ]; then
    $printoutputpass "$testname" $exitstatus
  else
    $printoutputfail "$testname" $exitstatus
  fi
  return $exitstatus
}

runtestintestdir() {
  testname=$1
  testdir=$testname.dir
  mkdir -p "$testdir"
  (
    cd "$testdir";
    runtestandprintoutput "$testname"
  )
}

runtestsandlog() {
  touch pass fail
  while read testname; do
    if runtestintestdir "$testname"; then
      echo "$testname" >> pass
    else
      echo "$testname" >> fail
    fi
  done < tests
}

printsummary() {
  if [ -s fail ]; then
    echo "failed tests:"
    cat fail
    echo "----------------"
    exitstatus=1
  fi
  wc -l tests pass fail | {
    read runcount ignorefilename
    read passcount ignorefilename
    read failcount ignorefilename
    read ignoretotal
    echo "run: $runcount pass: $passcount fail: $failcount"
  }
  return $exitstatus
}

runtestsinshutdir() {
  testnames=$1
  mkdir -p "$config_fullshutdir"
  (
    cd "$config_fullshutdir"
    cp "$testnames" tests
    runtestsandlog
    printsummary
  )
}

runtests() {
  testnames=$1
  if $candeleteshutdir; then
    rm -rf "$config_fullshutdir"
    runtestsinshutdir "$testnames"
    exitstatus=$?
  else
    echo "name exists: $config_shutdir" >&2
    echo "will not overwrite" >&2
    echo "use -f to overwrite" >&2
    exitstatus=2
  fi
  return $exitstatus
}

printtestnames() {
  testnames=$1
  cat "$testnames"
  wc -l "$testnames" | {
    read count ignorefilename
    echo "would run: $count"
  }
}

doshut() {
  testnames=$(mktemp --tmpdir shuttestnames.XXX)
  collecttestnames > "$testnames"
  if [ -s "$testnames" ]; then
    $shutaction "$testnames"
    exitstatus=$?
  else
    echo "no tests found"
    exitstatus=3
  fi
  rm "$testnames"
  return $exitstatus
}

main() {
  configfromargv "$@"
  setup
  doshut
  exitstatus=$?
  return $exitstatus
}

main "$@"
