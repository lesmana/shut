#! /bin/sh

default_pattern="test"

config_shiftargv=0
config_donotruntests=false
config_verbose=false
config_shutdir="shutdir"
config_delete=false
config_split=false
config_quiet=false
config_tail=10
SHUT_PWD=$PWD

configfromargv() {
  # this function expects "$@" as argument
  argc=$#
  while [ $# -ge 1 ]; do
    arg=$1
    case "$arg" in
      -d) shift ; config_shutdir="$1" ;;
      -f) config_delete=true ;;
      -n) config_donotruntests=true ;;
      -v) config_verbose=true ;;
      -x) config_split=true ;;
      -q) config_quiet=true ;;
      -t) shift ; config_tail="$1" ;;
      --) shift ; break ;;
      -*) echo "argv error: $1" ; exit 2 ;;
       *) break ;;
    esac
    shift
  done
  config_shiftargv=$((argc - $#))
}

setup() {
  config_fullshutdir=$(readlink -f "$config_shutdir")
  if $config_delete; then
    candeleteshutdir_func=true
  else
    candeleteshutdir_func=trueifshutdirdoesnotexists
  fi
  if $config_donotruntests; then
    shutupandwhat_func=shutupandprinttestnames
  else
    shutupandwhat_func=shutupandruntests
  fi
  if $config_split; then
    runtestsaveoutput_func=runtestsaveoutputsplit
    printbody_func=printbodysplit
  else
    runtestsaveoutput_func=runtestsaveoutputmerge
    printbody_func=printbodymerge
  fi
  if $config_verbose; then
    printreportpass_func=printreport
    printreportfail_func=printreport
  elif $config_quiet; then
    printreportpass_func=true
    printreportfail_func=true
  else
    printreportpass_func=true
    printreportfail_func=printreport
  fi
}

findwithargs() {
  findargs=$1
  find -type d -name "$config_shutdir" -prune -o \( $findargs \) -print
}

collecttestnames() {
  shift "$config_shiftargv"
  if [ $# -eq 0 ]; then
    set -- "$default_pattern"
  fi
  findargs="-false"
  for pattern in "$@"; do
    if [ -f "$pattern" ]; then
      findargs="$findargs -o -type f -executable -path \*/$pattern"
    elif [ -d "$pattern" ]; then
      findargs="$findargs -o -type f -executable -path \*/$pattern/\*"
    else
      findargs="$findargs -o -type f -executable -path \*/$pattern\*"
    fi
  done
  findwithargs "$findargs" | sort
}

trueifshutdirdoesnotexists() {
  [ ! -e "$config_fullshutdir" ]
}

runtest() {
  testname=$1
  fulltestname=$(readlink -f "$SHUT_PWD/$testname")
  (
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    export SHUT_TESTPWD="$PWD"
    "$fulltestname"
  )
}

runtestsaveexitstatus() {
  testname=$1
  runtest "$testname"
  exitstatus=$?
  echo $exitstatus > ../exitstatus
  case $exitstatus in
    0) return 0 ;;
    *) return 1 ;;
  esac
}

runtestsaveoutputsplit() {
  testname=$1
  runtestsaveexitstatus "$testname" > ../stdout 2> ../stderr
}

runtestsaveoutputmerge() {
  testname=$1
  runtestsaveexitstatus "$testname" > ../output 2>&1
}

runtestinworkdir() {
  testname=$1
  mkdir workdir
  (
    cd workdir
    $runtestsaveoutput_func "$testname"
  )
  exitstatus=$?
  return $exitstatus
}

printbodysplit() {
  echo "stdout:"
  cat stdout | tail -n $config_tail | sed 's/^/  /'
  echo "stderr:"
  cat stderr | tail -n $config_tail | sed 's/^/  /'
}

printbodymerge() {
  echo "output:"
  cat output | tail -n $config_tail | sed 's/^/  /'
}

printexitstatus() {
  cat exitstatus | {
    read exitstatus
    echo "exitstatus: $exitstatus"
  }
}

actualprintreport() {
  testname=$1
  state=$2
  echo "================"
  echo "$testname"
  echo "----------------"
  $printbody_func
  echo "----------------"
  printexitstatus
  echo "$state $testname"
  echo "----------------"
}

printreport() {
  actualprintreport "$@"
}

runtestandprintreport() {
  testname=$1
  runtestinworkdir "$testname"
  exitstatus=$?
  case $exitstatus in
    0) $printreportpass_func "$testname" "PASS" ;;
    1) $printreportfail_func "$testname" "FAIL" ;;
  esac
  return $exitstatus
}

runtestintestdir() {
  testname=$1
  testdir=$testname.dir
  mkdir -p "$testdir"
  (
    cd "$testdir";
    runtestandprintreport "$testname"
  )
}

runtests() {
  touch pass fail
  fail=0
  while read testname; do
    runtestintestdir "$testname"
    exitstatus=$?
    case $exitstatus in
      0) echo "$testname" >> pass ;;
      1) echo "$testname" >> fail ; fail=1 ;;
    esac
  done < tests
  return $fail
}

printfails() {
  echo "failed tests:"
  cat fail
  echo "----------------"
}

printcounts() {
  wc -l tests pass fail | {
    read runcount ignorefilename
    read passcount ignorefilename
    read failcount ignorefilename
    read ignoretotal
    echo "run: $runcount pass: $passcount fail: $failcount"
  }
}

printsummary() {
  if [ -s fail ]; then
    printfails
  fi
  printcounts
}

runtestsandprintsummary() {
  runtests
  exitstatus=$?
  printsummary
  return $exitstatus
}

runtestsinshutdir() {
  mkdir -p "$config_fullshutdir"
  (
    cd "$config_fullshutdir"
    cp "$shuttempdir/tests" tests
    runtestsandprintsummary
  )
}

shutupandruntests() {
  if $candeleteshutdir_func; then
    rm -rf "$config_fullshutdir"
    runtestsinshutdir
    exitstatus=$?
  else
    echo "name exists: $config_shutdir" >&2
    echo "will not overwrite" >&2
    echo "use -f to overwrite" >&2
    exitstatus=2
  fi
  return $exitstatus
}

printtestnames() {
  cat tests
  wc -l tests | {
    read count ignorefilename
    echo "would run: $count"
  }
}

printtestnamesinshuttempdir() {
  (
    cd "$shuttempdir"
    printtestnames
  )
}

shutupandprinttestnames() {
  printtestnamesinshuttempdir
}

shutupwithtempdir() {
  tests="$shuttempdir/tests"
  collecttestnames "$@" > "$tests"
  if [ -s "$tests" ]; then
    $shutupandwhat_func
    exitstatus=$?
  else
    echo "no tests found"
    exitstatus=3
  fi
  return $exitstatus
}

shutup() {
  shuttempdir=$(mktemp -d --tmpdir shuttempdir.XXX)
  exitstatus=$?
  if [ $exitstatus -eq 0 ]; then
    shutupwithtempdir "$@"
    exitstatus=$?
    rm -rf "$shuttempdir"
  else
    echo "error creating tempdir" >&2
    echo "cannot continue" >&2
    exitstatus=3
  fi
  return $exitstatus
}

main() {
  configfromargv "$@"
  setup
  shutup "$@"
  exitstatus=$?
  return $exitstatus
}

main "$@"
