#! /bin/sh

prefix="test"
donotruntests=false
recursive=false
verbose=false
shutdir="shutdir"
delete=false
split=false

handle_args() {
  while getopts "l:nrvfx" "opt"; do
    case "$opt" in
      l) shutdir="$OPTARG";;
      f) delete=true;;
      n) donotruntests=true;;
      r) recursive=true;;
      v) verbose=true;;
      x) split=true;;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    prefix="$@"
  fi
}

setup() {
  fullshutdir=$(readlink -f "$shutdir")
  if [ -e "$fullshutdir" ]; then
    if $delete; then
      rm -rf "$fullshutdir"
    else
      echo "name exists: $shutdir" >&2
      echo "will not overwrite" >&2
      echo "use -f to overwrite" >&2
      exit 1
    fi
  fi
  mkdir -p "$fullshutdir"
  shutdir=$fullshutdir
  SHUT_PWD=$PWD
}

collecttestnames() {
  if $recursive; then
    maxdepth=""
  else
    maxdepth="-maxdepth 1"
  fi
  find -L $SHUT_PWD $maxdepth -type f -executable -name "$prefix*" | sort
}

runtestinpwd() {
  testname=$1
  (
    mkdir workdir
    cd workdir
    export SHUT_PWD
    export SHUT_TEST=$testname
    export SHUT_TESTPWD=$PWD
    "$testname"
  )
  exitstatus=$?
  return $exitstatus
}

decoratehead() {
  relativetestname=$1
  echo "================"
  echo "$relativetestname"
  echo "----------------"
}

decoratebody() {
  echo "output:"
  sed 's/^/  /'
}

decoratetail() {
  relativetestname=$1
  exitstatus=$2
  echo "----------------"
  echo "exitstatus: $exitstatus"
  if [ $exitstatus -eq 0 ]; then
    echo "PASS $relativetestname"
  else
    echo "FAIL $relativetestname"
  fi
  echo "----------------"
}

decorate() {
  testname=$1
  relativetestname=$(echo "$testname" | sed "s:$SHUT_PWD:.:")
  exitstatus=$2
  decoratehead "$relativetestname"
  decoratebody
  decoratetail "$relativetestname" "$exitstatus"
}

printall() {
  testname=$1
  exitstatus=$2
  decorate "$testname" $exitstatus
}

printonlyfail() {
  testname=$1
  exitstatus=$2
  if [ $exitstatus -ne 0 ]; then
    decorate "$testname" $exitstatus
  fi
}

runtestsplitouterr() {
  testname=$1
  runtestinpwd "$testname" > output 2> stderr
  exitstatus=$?
  echo $exitstatus > exitstatus
  if $verbose; then
    cat output stderr | printall "$testname" $exitstatus
  else
    cat output stderr | printonlyfail "$testname" $exitstatus
  fi
  return $exitstatus
}

runtestmergedouterr() {
  testname=$1
  runtestinpwd "$testname" > output 2>&1
  exitstatus=$?
  echo $exitstatus > exitstatus
  if $verbose; then
    printall "$testname" $exitstatus < output
  else
    printonlyfail "$testname" $exitstatus < output
  fi
  return $exitstatus
}

runtest() {
  testname=$1
  if $split; then
    runtestsplitouterr "$testname"
  else
    runtestmergedouterr "$testname"
  fi
}

runtestintestworkdir() {
  testname=$1
  relativetestname=$(echo "$testname" | sed "s:$SHUT_PWD:.:")
  testworkdir=$relativetestname.dir
  (
    mkdir -p "$testworkdir"
    cd "$testworkdir";
    runtest "$testname"
  )
}

runtests() {
  fail=0
  while read testname; do
    echo "$testname" >&3
    if runtestintestworkdir "$testname"; then
      echo "$testname" >&4
    else
      echo "$testname" >&5
      fail=1
    fi
  done
  return $fail
}

count() {
  wc -l
}

summaryline() {
  read run
  read pass
  read fail
  echo "run: $run pass: $pass fail: $fail"
}

stdintoexitstatus() {
  read exitstatus
  return $exitstatus
}

runtestsandprintsummary() {
  ((((((
  runtests >&6; echo $? >&7
  ) 3>&1 | count >&3
  ) 4>&1 | count >&4
  ) 5>&1 | count >&5
  ) 3>&1 4>&1 5>&1 | summaryline >&6
  ) 7>&1 | stdintoexitstatus
  ) 6>&1
}

runtestsnotandprintsummary() {
  count=0
  while read testname; do
    relativetestname=$(echo "$testname" | sed "s:$SHUT_PWD:.:")
    echo "$relativetestname"
    count=$(($count + 1))
  done
  echo "would run: $count"
}

runtestsornot() {
  if $donotruntests; then
    runtestsnotandprintsummary
  else
    runtestsandprintsummary
  fi
}

main() {
  handle_args "$@"
  setup
  collecttestnames | (cd "$shutdir" && runtestsornot)
  success=$?
  return $success
}

main "$@"
