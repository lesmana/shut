#! /bin/sh

prefix="test"
donotruntests=false
verbose=false
shutdir="shutdir"
delete=false
split=false
SHUT_PWD=$PWD

configfromargv() {
  while getopts "d:nvfx" "opt"; do
    case "$opt" in
      d) shutdir="$OPTARG";;
      f) delete=true;;
      n) donotruntests=true;;
      v) verbose=true;;
      x) split=true;;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    prefix="$@"
  fi
}

setup() {
  fullshutdir=$(readlink -f "$shutdir")
  if $delete; then
    candeleteshutdir=true
  else
    candeleteshutdir=trueifshutdirdoesnotexists
  fi
  if $donotruntests; then
    shutaction=printtestnames
  else
    shutaction=runtests
  fi
}

collecttestnames() {
  find -type d -name "$shutdir" -prune -o \
        -type f -executable -name "$prefix*" -print | sort
}

trueifshutdirdoesnotexists() {
  [ ! -e "$fullshutdir" ]
}

runtestinpwd() {
  testname=$1
  fulltestname=$(readlink -f "$SHUT_PWD/$testname")
  mkdir workdir
  (
    cd workdir
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    export SHUT_TESTPWD="$PWD"
    "$fulltestname"
  )
  exitstatus=$?
  return $exitstatus
}

decoratehead() {
  testname=$1
  echo "================"
  echo "$testname"
  echo "----------------"
}

decoratebody() {
  echo "output:"
  sed 's/^/  /'
}

decoratetail() {
  testname=$1
  exitstatus=$2
  echo "----------------"
  echo "exitstatus: $exitstatus"
  if [ $exitstatus -eq 0 ]; then
    echo "PASS $testname"
  else
    echo "FAIL $testname"
  fi
  echo "----------------"
}

decorate() {
  testname=$1
  exitstatus=$2
  decoratehead "$testname"
  decoratebody
  decoratetail "$testname" "$exitstatus"
}

printall() {
  testname=$1
  exitstatus=$2
  decorate "$testname" $exitstatus
}

printonlyfail() {
  testname=$1
  exitstatus=$2
  if [ $exitstatus -ne 0 ]; then
    decorate "$testname" $exitstatus
  fi
}

printoutput() {
  testname=$1
  exitstatus=$2
  if $verbose; then
    printall "$testname" $exitstatus
  else
    printonlyfail "$testname" $exitstatus
  fi
}

runtestsplitouterr() {
  testname=$1
  runtestinpwd "$testname" > stdout 2> stderr
  exitstatus=$?
  echo $exitstatus > exitstatus
  cat stdout stderr | printoutput "$testname" $exitstatus
  return $exitstatus
}

runtestmergedouterr() {
  testname=$1
  runtestinpwd "$testname" > output 2>&1
  exitstatus=$?
  echo $exitstatus > exitstatus
  printoutput "$testname" $exitstatus < output
  return $exitstatus
}

runtestwithsplitormerged() {
  testname=$1
  if $split; then
    runtestsplitouterr "$testname"
  else
    runtestmergedouterr "$testname"
  fi
}

runtestintestworkdir() {
  testname=$1
  testworkdir=$testname.dir
  mkdir -p "$testworkdir"
  (
    cd "$testworkdir";
    runtestwithsplitormerged "$testname"
  )
}

runtestsandlog() {
  touch pass fail
  while read testname; do
    if runtestintestworkdir "$testname"; then
      echo "$testname" >> pass
    else
      echo "$testname" >> fail
    fi
  done < tests
}

printsummary() {
  if [ -s fail ]; then
    echo "failed tests:"
    cat fail
    echo "----------------"
    exitstatus=1
  fi
  wc -l tests pass fail | {
    read runcount ignorefilename
    read passcount ignorefilename
    read failcount ignorefilename
    read ignoretotal
    echo "run: $runcount pass: $passcount fail: $failcount"
  }
  return $exitstatus
}

runtestsinshutdir() {
  testnames=$1
  mkdir -p "$fullshutdir"
  (
    cd "$fullshutdir"
    cp "$testnames" tests
    runtestsandlog
    printsummary
  )
}

runtests() {
  testnames=$1
  if $candeleteshutdir; then
    rm -rf "$fullshutdir"
    runtestsinshutdir "$@"
    exitstatus=$?
  else
    echo "name exists: $shutdir" >&2
    echo "will not overwrite" >&2
    echo "use -f to overwrite" >&2
    exitstatus=2
  fi
  return $exitstatus
}

printtestnames() {
  testnames=$1
  cat "$testnames"
  wc -l "$testnames" | {
    read count ignorefilename
    echo "would run: $count"
  }
}

doshut() {
  testnames=$(mktemp --tmpdir shuttestnames.XXX)
  collecttestnames > "$testnames"
  if [ -s "$testnames" ]; then
    $shutaction "$testnames"
    exitstatus=$?
  else
    echo "no tests found"
    exitstatus=3
  fi
  rm "$testnames"
  return $exitstatus
}

main() {
  configfromargv "$@"
  setup
  doshut
  exitstatus=$?
  return $exitstatus
}

main "$@"
