#! /bin/sh

prefix="test"
donotruntests=false
recursive=false
keeplogdir=false
logdir=

handle_args() {
  while getopts "d:knr" "opt"; do
    case "$opt" in
      d) logdir="$OPTARG"; keeplogdir=true;;
      k) keeplogdir=true;;
      n) donotruntests=true;;
      r) recursive=true;;
      *) exit 1;;
    esac
  done
  shift $(($OPTIND - 1))
  if [ $# -ge 1 ]; then
    prefix="$@"
  fi
}

setup() {
  if [ -n "$logdir" ]; then
    if [ -e "$logdir" ]; then
      rm -rf "$logdir"
    fi
    mkdir -p "$logdir"
  else
    logdir=$(mktemp -d --tmpdir shut.XXXXXXXXXX)
  fi
}

collecttestnames() {
  if $recursive; then
    maxdepth=""
  else
    maxdepth="-maxdepth 1"
  fi
  find -L . $maxdepth -type f -executable -name "$prefix*" | sort
}

runtestforreal() {
  testname=$1
  dirname=$(dirname "$testname")
  basename=$(basename "$testname")
  (cd "$dirname"; "./$basename" 2>&1)
  exitstatus=$?
  return $exitstatus
}

runtesttofile() {
  testname=$1
  mkdir -p "$logdir/$testname"
  outputfile="$logdir/$testname/output"
  exitstatus=$( ( ( runtestforreal "$testname"; echo $? >&3 ) |
        tee "$outputfile" >&2 ) 3>&1 ) 2>&1
  exitstatusfile="$logdir/$testname/exitstatus"
  echo $exitstatus > "$exitstatusfile"
  return $exitstatus
}

runtest() {
  testname=$1
  output="$(runtesttofile "$testname" 2>&1)"
  exitstatus=$?
  if [ $exitstatus -ne 0 ]; then
    echo "================"
    echo "$testname"
    echo "----------------"
    echo "output:"
    echo "$output" | sed 's/^/  /'
    echo "----------------"
    echo "exitstatus: $exitstatus"
    echo "FAIL $testname"
    echo "----------------"
  fi
  return $exitstatus
}

runtests() {
  fail=0

  while read testname; do
    if $donotruntests; then
      echo "$testname"
    else
      runtest "$testname" || fail=1
    fi
  done

  return $fail
}

cleanup() {
  if ! $keeplogdir; then
    rm -rf "$logdir"
  fi
}

main() {
  handle_args "$@"
  setup
  collecttestnames | runtests
  success=$?
  cleanup
  return $success
}

main "$@"
