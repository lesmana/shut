#! /bin/sh

default_pattern="test"

config_shiftargv=0
config_donotruntests=false
config_verbose=false
config_shutdir="shutdir"
config_delete=false
config_split=false
config_quiet=false
config_tail=10
SHUT_PWD=$PWD

configfromargv() {
  # this function expects "$@" as argument
  argc=$#
  while [ $# -ge 1 ]; do
    arg=$1
    case "$arg" in
      -d) shift ; config_shutdir="$1" ;;
      -f) config_delete=true ;;
      -n) config_donotruntests=true ;;
      -v) config_verbose=true ;;
      -x) config_split=true ;;
      -q) config_quiet=true ;;
      -t) shift ; config_tail="$1" ;;
      --) shift ; break ;;
      -*) echo "argv error: $1" ; exit 2 ;;
       *) break ;;
    esac
    shift
  done
  config_shiftargv=$((argc - $#))
}

setup() {
  config_fullshutdir=$(readlink -f "$config_shutdir")
  if $config_delete; then
    candeleteshutdir_func=true
  else
    candeleteshutdir_func=trueifshutdirdoesnotexists
  fi
  if $config_donotruntests; then
    shutaction_func=printtestnames
  else
    shutaction_func=runtests
  fi
  if $config_split; then
    runtestsaveoutput_func=runtestsaveoutputsplit
    printbody_func=printbodysplit
  else
    runtestsaveoutput_func=runtestsaveoutputmerge
    printbody_func=printbodymerge
  fi
  if $config_verbose; then
    printoutputpass_func=printoutputdecorated
    printoutputfail_func=printoutputdecorated
  elif $config_quiet; then
    printoutputpass_func=true
    printoutputfail_func=true
  else
    printoutputpass_func=true
    printoutputfail_func=printoutputdecorated
  fi
}

findwithargs() {
  findargs=$1
  find -type d -name "$config_shutdir" -prune -o \( $findargs \) -print
}

collecttestnames() {
  shift "$config_shiftargv"
  if [ $# -eq 0 ]; then
    set -- "$default_pattern"
  fi
  findargs="-false"
  for pattern in "$@"; do
    if [ -f "$pattern" ]; then
      findargs="$findargs -o -type f -executable -path \*/$pattern"
    elif [ -d "$pattern" ]; then
      findargs="$findargs -o -type f -executable -path \*/$pattern/\*"
    else
      findargs="$findargs -o -type f -executable -path \*/$pattern\*"
    fi
  done
  findwithargs "$findargs" | sort
}

trueifshutdirdoesnotexists() {
  [ ! -e "$config_fullshutdir" ]
}

runtest() {
  testname=$1
  fulltestname=$(readlink -f "$SHUT_PWD/$testname")
  (
    export SHUT_PWD
    export SHUT_TEST="$fulltestname"
    export SHUT_TESTPWD="$PWD"
    "$fulltestname"
  )
}

runtestsaveoutputsplit() {
  testname=$1
  runtestsaveoutputexitstatus "$testname" > ../stdout 2> ../stderr
}

runtestsaveoutputmerge() {
  testname=$1
  runtestsaveoutputexitstatus "$testname" > ../output 2>&1
}

runtestsaveoutputexitstatus() {
  testname=$1
  runtest "$testname"
  exitstatus=$?
  echo $exitstatus > ../exitstatus
  return $exitstatus
}

runtestinworkdir() {
  testname=$1
  mkdir workdir
  (
    cd workdir
    $runtestsaveoutput_func "$testname"
  )
  exitstatus=$?
  return $exitstatus
}

printbodysplit() {
  echo "stdout:"
  cat stdout | tail -n $config_tail | sed 's/^/  /'
  echo "stderr:"
  cat stderr | tail -n $config_tail | sed 's/^/  /'
}

printbodymerge() {
  echo "output:"
  cat output | tail -n $config_tail | sed 's/^/  /'
}

printexitstatus() {
  cat exitstatus | {
    read exitstatus
    echo "exitstatus: $exitstatus"
  }
}

printoutputdecorated() {
  testname=$1
  state=$2
  echo "================"
  echo "$testname"
  echo "----------------"
  $printbody_func
  echo "----------------"
  printexitstatus
  echo "$state $testname"
  echo "----------------"
}

runtestandprintoutput() {
  testname=$1
  if runtestinworkdir "$testname"; then
    $printoutputpass_func "$testname" "PASS"
    exitstatus=0
  else
    $printoutputfail_func "$testname" "FAIL"
    exitstatus=1
  fi
  return $exitstatus
}

runtestintestdir() {
  testname=$1
  testdir=$testname.dir
  mkdir -p "$testdir"
  (
    cd "$testdir";
    runtestandprintoutput "$testname"
  )
}

runtestsandlog() {
  touch pass fail
  while read testname; do
    if runtestintestdir "$testname"; then
      echo "$testname" >> pass
    else
      echo "$testname" >> fail
    fi
  done < tests
}

printsummary() {
  if [ -s fail ]; then
    echo "failed tests:"
    cat fail
    echo "----------------"
    exitstatus=1
  fi
  wc -l tests pass fail | {
    read runcount ignorefilename
    read passcount ignorefilename
    read failcount ignorefilename
    read ignoretotal
    echo "run: $runcount pass: $passcount fail: $failcount"
  }
  return $exitstatus
}

runtestsinshutdir() {
  testnames=$1
  mkdir -p "$config_fullshutdir"
  (
    cd "$config_fullshutdir"
    cp "$testnames" tests
    runtestsandlog
    printsummary
  )
}

runtests() {
  testnames=$1
  if $candeleteshutdir_func; then
    rm -rf "$config_fullshutdir"
    runtestsinshutdir "$testnames"
    exitstatus=$?
  else
    echo "name exists: $config_shutdir" >&2
    echo "will not overwrite" >&2
    echo "use -f to overwrite" >&2
    exitstatus=2
  fi
  return $exitstatus
}

printtestnames() {
  testnames=$1
  cat "$testnames"
  wc -l "$testnames" | {
    read count ignorefilename
    echo "would run: $count"
  }
}

doshut() {
  testnames=$(mktemp --tmpdir shuttestnames.XXX)
  collecttestnames "$@" > "$testnames"
  if [ -s "$testnames" ]; then
    $shutaction_func "$testnames"
    exitstatus=$?
  else
    echo "no tests found"
    exitstatus=3
  fi
  rm "$testnames"
  return $exitstatus
}

main() {
  configfromargv "$@"
  setup
  doshut "$@"
  exitstatus=$?
  return $exitstatus
}

main "$@"
